#!/usr/bin/env ruby

require 'pry'
require 'time'
require 'json'

class MakeGraph
  class Entry
    attr_reader :time
    def initialize(time)
      @time = Time.parse(time) || raise("could not parse time: #{time}")
    end

    def formatted_time
      @time.strftime('%F %T')
    end
  end

  class FSBCEntry < Entry
    attr_reader :comment

    def initialize(time, details, num_sets, comment)
      super(time)

      @details = details
      @num_sets = num_sets.split('-').map(&:to_i)
      @comment = comment
    end

    def reps_in_set(num)
      @num_sets[num-1] || 0
    end

    def color_in_set(set, total)
      @color ||= case @details
                 when /green band.*support/
                   'rgba(10,200,10,1)'
                 when /blue band.*support/
                   'rgba(10,10,200,1)'
                 when /black band.*support/
                   'rgba(10,10,10,1)'
                 else
                   raise "cannot find color in #{@details}"
                 end
    end
  end

  def initialize(org, html)
    @org = org
    @html = html
  end

  def run
    out "parsing #{@org}"
    @entries = File.read(@org).lines.map(&method(:parse_line)).reject(&:nil?)
    out "found #{@entries.size} entries"

    File.open(@html, 'w') do |f|
      f.write render_template
    end
    out "Generated #{@html}"
  end

  def parse_line(str)
    return unless str =~ /^\s*-\s*</

    case str
    when %r~<([^>]*)> FBSC1 \(([^)]+)\) ([0-9-]+)\s?([^)]+)?~
      FSBCEntry.new(*Regexp.last_match.captures)
    else
      out "??? #{str}"
      nil
    end
  end

  def render_template
    num_sets = 4
    opa_base = 1
    data = 1.upto(num_sets).map do |i|
      { x: @entries.map(&:formatted_time),
        y: @entries.map { |e| e.reps_in_set(i) },
        hovertext: @entries.map(&:comment),
        marker: {
          color: @entries.map { |e| e.color_in_set(i, num_sets) },
          opacity: (i + opa_base).to_f / (num_sets + opa_base),
        },
        name: "Set #{i}",
        type: 'bar'
      }
    end

    layout = {
      title: "FBSC",
      xaxis: {
        tickangle: -45,
      },
      showlegend: false,
      barmode: 'stack'
    }

    <<-EOHTML
<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <title>Sport #{Time.now}</title>
    <script src="https://cdn.plot.ly/plotly-2.34.0.min.js" charset="utf-8"></script>
    <style>
      #fsbc {
            width: 90vw;
            height: 90vh;
      }
    </style>
  </head>
  <body>
    <div id="fsbc"></div>
    <script>
      const fsbc = document.getElementById('fsbc');
      Plotly.newPlot(fsbc, #{data.to_json}, #{layout.to_json}, {responsive: true});
    </script>
  </body>
</html>
    EOHTML
  end

  def out(message)
    $stderr.puts "#{Time.now}: #{message}"
  end
end

if $0 == __FILE__
  MakeGraph.new(
    "#{ENV['HOME']}/org/Sport.org",
    "#{ENV['HOME']}/tmp/sport.html"
  ).run
end
